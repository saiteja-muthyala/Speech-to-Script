Here's a simple Python program that converts speech to text using the `speech_recognition` library, which leverages Google's Web Speech API:

### Step 1: Install Required Libraries

First, you need to install the `speech_recognition` library. You can install it using pip:

```bash
pip install SpeechRecognition
pip install pyaudio
```

**Note**: On some systems, you might need to install `PyAudio` separately. If you encounter issues installing `PyAudio` via pip, you can use the following:

- For Windows:
  1. Download the `whl` file from [here](https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyaudio).
  2. Run `pip install <path_to_downloaded_file>.whl`.

- For Linux:
  ```bash
  sudo apt-get install python3-pyaudio
  ```

### Step 2: Write the Program

Here's a Python program that listens to your microphone and converts your speech to text:

```python
import speech_recognition as sr

# Initialize the recognizer
recognizer = sr.Recognizer()

# Function to convert voice to text
def voice_to_text():
    # Use the microphone as source for input.
    with sr.Microphone() as source:
        print("Please say something:")
        # Adjust the recognizer sensitivity to ambient noise
        recognizer.adjust_for_ambient_noise(source, duration=1)
        # Listen to the input from the microphone
        audio = recognizer.listen(source)
        
        try:
            # Use Google's speech recognition
            text = recognizer.recognize_google(audio)
            print("You said: " + text)
        except sr.UnknownValueError:
            print("Sorry, I did not understand that.")
        except sr.RequestError:
            print("Could not request results from Google Speech Recognition service.")

# Run the voice to text conversion function
voice_to_text()
```

### How It Works

1. **Recognizer Initialization**: The `Recognizer()` class from the `speech_recognition` library is used to initialize the recognizer.

2. **Microphone as Source**: The `Microphone()` class is used to capture audio input from the default microphone.

3. **Noise Adjustment**: `adjust_for_ambient_noise(source)` helps the recognizer adjust to the ambient noise levels, improving the accuracy of speech recognition.

4. **Listening**: The `listen(source)` method captures the audio.

5. **Speech Recognition**: The `recognize_google(audio)` method is used to convert the audio input to text using Google's Web Speech API.

6. **Error Handling**: The code includes error handling for cases where the speech is not understood or when there is an issue with the API request.

### Running the Program

To run this program, simply save it to a `.py` file and run it in your Python environment. Ensure your microphone is connected and working properly.

### Possible Enhancements

- **Offline Recognition**: Implement offline recognition using models like CMU Sphinx.
- **Language Support**: Extend the program to support multiple languages by specifying the language code in the `recognize_google()` method.
- **Continuous Listening**: Modify the program to continuously listen and process speech in real-time.